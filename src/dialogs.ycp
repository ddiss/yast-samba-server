/* File:	include/samba-server/dialogs.ycp
 * Package:	Configuration of samba-server
 * Summary:	Dialogs definitions
 * Authors:	Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{

textdomain "samba-server";

import "CWM";
import "Label";
import "Mode";
import "Popup";
import "Samba";
import "SambaServer";
import "SambaServerWidgets";
import "Wizard";

include "samba-server/helps.ycp";
include "samba-server/routines.ycp";
include "samba-client/routines.ycp";

map AddSharePopup();

/**
 * SAMBA role dialog
 * @return dialog result
 */
symbol RoleDialog () ``{

    /* Samba-server role dialog caption */
    string caption = _("Samba Server Role");
    
    Wizard::SetContents( caption, `VBox(
	`RadioButtonGroup( `id(`server_status), `VBox(
	    // radio button label
    	    `Left( `RadioButton( `id(`disabled), `opt(`notify), _("&Disable Samba Server") ) ),
	    // radio button label
    	    `Left( `RadioButton( `id(`enabled), `opt(`notify), _("&Enable Samba Server") ) )
	)),
	`VSpacing(),
	`HBox(
	    `HSpacing(3),
	    // radio button group label
	    `Frame( _("Sharing Type"), `VBox(
		`RadioButtonGroup( `id(`samba_role), `VBox(
		    `Left( `RadioButton( `id(`standalone), `opt(`notify), SambaServer::roleName( `standalone ), true ) ),
		    `Left( `RadioButton( `id(`bdc), `opt(`notify), SambaServer::roleName( `bdc ) ) ),
		    `Left( `RadioButton( `id(`pdc), `opt(`notify), SambaServer::roleName( `pdc ) ) )
	        ) ),
	    
		`VBox(
		    WorkgroupWidget(),
		    // text entry label
		    `TextEntry(`id(`server_description), _("Server &Description:"), SambaServer::server_string ),
		    // text entry label
		    `TextEntry(`id(`netbios_name), _("Server &NetBIOS Name:"), SambaServer::netbios_name )
	        ) 
	    ) ),
	    `HSpacing(3)
	),
	// push button label
	`PushButton( `id( `advanced ), _("&Authentication Details") )
	) , 
	HELPS["RoleDialog"]:"", false, true
    );
    
    UI::ChangeWidget( `id( SambaServer::role ), `Value, true );
    if( SambaServer::role == `disabled ) 
    {
	// if it is disabled, set the radio button of the would-be enabled role
	UI::ChangeWidget( `id( SambaServer::DetermineRole() ), `Value, true );
    }

    any ret = nil;
    while(true) {

	// enable widgets according to the current role
	boolean ew = !((boolean) UI::QueryWidget( `id( `disabled ), `Value ));
	
	UI::ChangeWidget( `id( `enabled ), `Value, ew );

	UI::ChangeWidget( `id( `pdc ), `Enabled, ew );
	UI::ChangeWidget( `id( `bdc ), `Enabled, ew );
	UI::ChangeWidget( `id( `standalone ), `Enabled, ew );
	UI::ChangeWidget( `id( `workgroup ), `Enabled, ew );
	UI::ChangeWidget( `id( `server_description ), `Enabled, ew );
	UI::ChangeWidget( `id( `advanced ), `Enabled, ew );
	UI::ChangeWidget( `id( `browse ), `Enabled, ew );
	UI::ChangeWidget( `id( `netbios_name ), `Enabled, ew );
	
	ret = UI::UserInput();
	
	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `browse ) {
            string new_workgroup = BrowseWorkgroups();

            if( new_workgroup != nil ) {
                // fill in the new workgroup name
                UI::ChangeWidget( `id(`workgroup), `Value, new_workgroup );
            }
            continue;
	}
        else if(ret == `next || ret == `advanced ) {
	    symbol role = `disabled;

	    // if not disabled, choose the role
	    if( ew ) {
		role = (symbol) UI::QueryWidget( `id( `samba_role ), `CurrentButton ) ;
	    }
	    
	    // warning about replication for BDC
	    if( role == `bdc ) {
		// translators: BDC requires replication of important data but YaST does not support this
		Popup::Warning(_("The backup domain controller role
requires a replication of data about
users and other aspects from a 
primary domain controller. 
However, YaST2 cannot set up
the replication.

The primary domain 
controller must be a Samba server.
") );		
	    }

	    // update the widgets
	    UI::ChangeWidget( `id( role ), `Value, true );

	    // store the new settings
	    if( ! SambaServer::setRole( role ) ) {
		// role switch was unsuccessful, continue editing
		ret = nil;
		continue;
	    }

	    Samba::setWorkgroup( (string) UI::QueryWidget( `id(`workgroup ), `Value ) );
	    SambaServer::setDescription( (string) UI::QueryWidget( `id( `server_description ), `Value ) );
	    SambaServer::netbios_name = (string) UI::QueryWidget( `id( `netbios_name ), `Value );
	    
	    if( SambaServer::role == `next ) {
		symbol res = CheckWorkgroup( Samba::workgroup );
		if( res != `workgroup && SambaServer::role == `pdc ) {
		    // translators: continue/cancel popup. Warning, that there is already a PDC present.
		    if( ! Popup::ContinueCancel( sformat( _("You set this Samba server
to act as primary domain controller.
However, a primary domain controller
already exists in domain '%1'.
The domain will not work correctly if there
are two primary domain controllers.

Really continue?
"), Samba::workgroup ) ) ) continue;
		}
		
		// save the settings
//		SambaServer::WriteSAMBackend();
//		SambaServer::ReloadSettings();
		
		// ask to join the domain
		AskJoinDomain( Samba::workgroup, res );
	    }

            break;
        }
    }
    
    return (symbol) ret;
}

/**
 * OverallSharesDialog dialog
 * @return dialog result
 */
symbol OverallSharesDialog () ``{

    // skip the dialog, if the service is disabled
    if( SambaServer::role == `disabled ) return `next;

    /* Samba-server overall shares dialog caption */
    string caption = _("Shared Resources");
    
    /* Samba-server overall shares dialog contents */
    term contents = 
	`HVSquash(
	// frame label for global sharing check boxes
	`Frame( _("Available Shares"), 
	`VBox( 
	    // check box to share the home directories
	    `Left(`CheckBox( `id( `homes ), _("Share &Homes"), SambaServer::share_homes ) ),
	    `HBox( 
		// check box to share the printers
		`Left(`CheckBox( `id( `printers ), `opt( `notify ),  _("Share &Printers"), SambaServer::share_printers ) ),
		// push button
		`PushButton( `id( `select_printers ), _("&Select...") ),
		`HStretch()
	    ),
	// push button
    	`PushButton( `id( `other_shares ), _("&Advanced...")  )
	)
    ) );

    Wizard::SetContentsButtons(caption, contents, HELPS["OverallShares"]:"",
	    Label::BackButton(), Label::FinishButton());

    any ret = nil;
    while(true) {
    
	UI::ChangeWidget( `id( `select_printers ), `Enabled, UI::QueryWidget( `id( `printers ), `Value ) );
    
	ret = UI::UserInput();

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
        else if(ret == `next || ret == `back || ret == `other_shares ) {
	    SambaServer::enableHomes( (boolean) UI::QueryWidget( `id( `homes ), `Value ) );
	    SambaServer::enablePrinters( (boolean) UI::QueryWidget( `id( `printers ), `Value ) );
            break;
        }
	else if(ret == `select_printers ) {
	    UI::OpenDialog(
		`VBox( 
		    // translators: printer selection box
		    `MultiSelectionBox( `id( `printer_list ), _("Select Available Printers:") ,
		    printers2items( SambaServer::printer_status ) ),
		    `HBox( 
			`PushButton( `id( `ok ), `opt(`default), Label::OKButton()),
			`PushButton( `id( `cancel ), Label::CancelButton())
		    )
		)
	    );
	    
	    ret = UI::UserInput();
	    if( ret == `ok ) {
		// update the list of selected printers
		SambaServer::enablePrinterNames( 
		    (list<string>) UI::QueryWidget( `id( `printer_list ), `SelectedItems )
		);
	    }
	    
	    UI::CloseDialog();
	    continue;
	}
    }
    
    Wizard::RestoreNextButton();

    return (symbol) ret;
}

/**
 * ShareDirsDialog dialog
 * @return dialog result
 */
symbol ShareDirsDialog () ``{

    list items = shares2items( SambaServer::shares );
    
    /* Samba-server shared directories dialog caption */
    string caption = _("Shared Directories");

    /* Samba-server shared directories dialog contents */
    term contents = 
    `VBox(
	`Table(`id( `table ), `header(
	    // table column header
	    _("Status"), 
	    // table column header
	    _("Name"), 
	    // table column header
	    _("Path"), 
	    // table column header
	    _("Comment") ), items ),
	`HBox(
	    `PushButton( `id(`add), Label::AddButton() ),
	    `PushButton( `id(`edit), Label::EditButton() ),
	    `PushButton( `id(`delete), Label::DeleteButton() ),
	    `HStretch(),
	    // push button label
	    `PushButton( `id(`toggle), _("&Toggle Status") )
	)
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["ShareDirs"]:"",
	    Label::BackButton(), Label::OKButton());

    any ret = nil;
    while(true) {
    
	UI::ChangeWidget( `id(`edit), `Enabled, size(SambaServer::shares)>0 );
	UI::ChangeWidget( `id(`delete), `Enabled, size(SambaServer::shares)>0 );
	UI::ChangeWidget( `id(`toggle), `Enabled, size(SambaServer::shares)>0 );

	ret = UI::UserInput();
        integer id = (integer) UI::QueryWidget(`id(`table), `CurrentItem);

	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `edit ) {
	    SambaServerWidgets::shareToEdit = (string) select( (term) UI::QueryWidget(`id(`table), `Item(id) ), 2, nil );
	    break;
	}
        else if(ret == `next || ret == `back) {
            break;
        }
	else if(ret == `toggle ) {
	    string share = (string) select( (term) UI::QueryWidget(`id(`table), `Item(id) ), 2, nil );
	    SambaServer::enableShare( share, (SambaServer::shares[share, "commentout"]:false) );
	    UI::ChangeWidget( `id(`table), `Items, shares2items( SambaServer::shares ) );
	    UI::ChangeWidget( `id(`table), `CurrentItem, id );
	    continue;
	}
	else if(ret == `add ) {
	    map result = AddSharePopup();
	    if( result != nil ) SambaServer::addShare( result["name"]:"" ,
		$[
		    "comment": result["comment"]:"",
		    "path": result["path"]:""
		] );
	    UI::ChangeWidget( `id(`table), `Items, shares2items( SambaServer::shares ) );
	    continue;
	}
	// translators: confirmation popup
	else if(ret == `delete)
	{
	    // confirmation dialog before deleting a share
	    if  (Popup::ContinueCancel( sformat( _("Really 
delete share '%1'?

All its settings will be lost.
"), select( (list) UI::QueryWidget(`id(`table), `Item(id) ), 2, nil ) ) ) ) {
		SambaServer::removeShare( (string) select( (term) UI::QueryWidget(`id(`table), `Item(id) ), 2, nil ) );
	    
		UI::ChangeWidget( `id(`table), `Items, shares2items( SambaServer::shares ) );
		continue;
	    }
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }
    
    Wizard::RestoreNextButton();

    return (symbol) ret;
}

/**
 * Dialog to configure passdb backends.
 * @return dialog result
 */
symbol PassdbDialog () {
    // dialog caption
    string caption = _("User Information Sources");

    list<map<string, any> > w = CWM::CreateWidgets (["passdb_edit"],
        SambaServerWidgets::widgets);

    term contents = `HBox (`HSpacing (1), `VBox (
        `VSpacing (1), 
	w[0, "widget"]:`VSpacing (0)
    ), `HSpacing (1));

    string help = CWM::MergeHelps (w);

    Wizard::SetContentsButtons (caption, contents, help,
        Label::BackButton (), Label::OKButton ());

    UI::ReplaceWidget( `id(`_tp_table_repl),
        // translators: menu button label for accessing the LDAP-related settings and actions
        `MenuButton( "LDAP",
	    // translators: menu item to show a LDAP-related settings
	    [ `item( `id(`ldap), _("Global LDAP Settings") ),
	      // translators: menu item to test the currently selected LDAP url
	      `item( `id(`ldap_test), _("Test LDAP Connection") ),
	    ]
	) 
    );

    return CWM::Run (w, $[`abort: ReallyAbort]);
}

/**
 * LDAP Dialog
 * @return dialog result
 */
symbol LDAPDialog () ``{

    /* Samba-server advanced dialog caption */
    string caption = _("LDAP Samba Server Options");

    /* Samba-server advanced dialog contents */
    term contents = 
    `VBox(
	// text entry label
	`TextEntry( `id( `ldap_suffix ), _("Search &Base DN:"), 
	    SambaServer::LDAP_suffix != nil ? SambaServer::LDAP_suffix: "" ),
	// text entry label
	`TextEntry( `id( `ldap_admin_dn ), _("&Administration DN:"), 
	    SambaServer::LDAP_admin_dn != nil ? SambaServer::LDAP_admin_dn : ""  ),
	Mode::config ? `Empty() : 
	    `HBox(
		// push button label
		`PushButton( `id( `ldap_password ), _("Set LDAP Administration &Password") )
	    )
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["Advanced"]:"",
	    Label::BackButton(), Label::OKButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	
	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(ReallyAbort()) break;
	    else continue;
	}
	else if(ret == `ldap_password ) {
	    // Translators: popup query for a password
	    string passwd = passwordPopup( sformat( _("Enter LDAP Administration Password"), Samba::workgroup ) );
	    // user cancelled
	    if( passwd == nil ) continue;

	    string error = SambaServer::setLDAPAdminPassword( passwd );
	    if(  error != nil )
	    {
		Popup::Error( error );
	    }
	    // Translators: Information popup
	    else Popup::Message( _("LDAP administration password was successfully changed.") );
	}
        else if(ret == `next ) {
	    SambaServer::setLDAPAdminDN( (string) UI::QueryWidget( `id( `ldap_admin_dn ), `Value ) );
	    SambaServer::setLDAPSuffix( (string) UI::QueryWidget( `id( `ldap_suffix ), `Value ) );

            break;
        }
	else if(ret == `back ) {
	    break;
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }
    
    Wizard::RestoreNextButton();

    return (symbol) ret;
}

/**
 * EditShareDialog dialog
 * @return dialog result
 */
symbol EditShareDialog () ``{

    term contents = `HBox (`HSpacing (1), `VBox (
        `VSpacing (1), 
        "share_edit"
    ), `HSpacing (1));

    // dialog caption
    string caption = sformat( _("Edit Share \"%1\""), SambaServerWidgets::shareToEdit );

    return CWM::ShowAndRun (
	["share_edit"], 
	SambaServerWidgets::widgets, 
	contents, 
	caption, 
	Label::BackButton (), Label::OKButton (), 
	$[`abort: ReallyAbort]
    );
}

/**
 * Popup to add a new share by entering its name, path and comment.
 * 
 * @return map	description of the new share
 */
map AddSharePopup() ``{
    UI::OpenDialog( 
	`VBox(
	    // translators: text entry label
	    `TextEntry( `id(`name), _("Share &Name:") ),
	    // translators: text entry label
	    `TextEntry( `id(`comment), _("Share &Description:") ),
	    `HBox(
		// translators: text entry label
		`TextEntry( `id(`path), _("Share &Path:") ),
		`Bottom( `PushButton( `id( `browse ), Label::BrowseButton() ) )
	    ),
	    `HBox( 
		`PushButton( `id( `ok ), Label::OKButton() ),
		`PushButton( `id( `cancel ), Label::CancelButton() )
	    )
	)
    );
    
    string name = "";
    string pathvalue = "";
    string comment = "";
    
    any ret = nil;
    do {
	ret = UI::UserInput();
	
	// user cancelled the dialog
	if( ret == `cancel ) {
	    UI::CloseDialog();
	    return nil;
	} else if( ret == `browse ) {
	    // translators: file selection dialog title
	    string dir = UI::AskForExistingDirectory ( "/", _("Path for a Share") );
	    if( dir != nil ) {
		UI::ChangeWidget( `id (`path), `Value, dir );
	    }
	    ret = nil;
	} else {
	    // OK was pressed
	
	    name = (string) UI::QueryWidget( `id( `name ), `Value );
	    pathvalue = (string) UI::QueryWidget( `id( `path ), `Value );
	    comment = (string) UI::QueryWidget( `id( `comment ), `Value );
	
	    if( size( name ) == 0 ) {
		// translators: error message
		Popup::Error( _("Share name cannot be empty.") );
		ret = nil;
	    } else if( size( pathvalue ) == 0 ) {
		// translators: error message
		Popup::Error( _("Share path cannot be empty.") );
		ret = nil;
	    } else if( ! Mode::config && SCR::Read( .target.stat, pathvalue ) == $[] ) {
		// translators: question popup. A user entered non-existent path
		// for a share
		if( !Popup::ContinueCancel( sformat( _("The path '%1' does not exist.
Really use this path?
"), pathvalue ) ) ) {
		    ret = nil;
		}
	    }
	}
    } while( ret == nil );
    
    UI::CloseDialog();
    
    return $[ "name": name,
	"comment": comment,
	"path": pathvalue
    ];
}

/* EOF */
}
