/**
 * File:	include/samba-server/dialogs.ycp
 * Package:	Configuration of samba-server
 * Summary:	Dialogs definitions
 * Authors:	Stanislav Visnovsky <stanislav.visnovsky@suse.cz>
 *
 * $Id$
 */

{

textdomain "samba-server";

import "String";
import "Label";
import "Wizard";
import "ProductFeatures";
import "CWMFirewallInterfaces";
import "Samba";
import "SambaServer";
import "SambaServerWidgets";
import "TabWidget";
import "CWM";

include "samba-server/helps.ycp";
include "samba-server/routines.ycp";
include "samba-client/routines.ycp";

string return_tab = "startup";

any Installation_Step1 () {

    string caption = _("Samba Installation") + " - " + _("Step 1 of 2");

    list <string> workgroups = maplist( string key,
	boolean value, Samba::PreprocessAvailableWorkgroups (), ``(key));

    // always add the currently configured workgroup
    if ( size(Samba::workgroup) > 0 && ! contains (workgroups, Samba::workgroup) )
    {
	workgroups = add ( workgroups, Samba::workgroup );
    }
    
    term contents =
	`VBox (
	    `VSquash (
		`Left( `Label ( _("Select one of the available workgroups or domains or enter your own.") ) )
	    ),
	    `VSpacing ( 1 ),
	    `VSquash (
		`Left ( `ComboBox ( `id( "workgroups" ), `opt( `editable ), _("&Workgroup or Domain Name"), workgroups ) )
	    ),
	    `VStretch ()
	);

    Wizard::SetContents ( caption, contents, HELPS["inst_step1"]:"", false, true);
	
    Wizard::HideBackButton ();
    
    if ( size(Samba::workgroup) > 0 )
    {
	UI::ChangeWidget ( `id ("workgroups"), `Value, Samba::workgroup );
    }

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if ( ret == `next || ret == `cancel || ret == `abort) {
	    break;
	}
	else {
	    y2error( "unexpected retcode: %1", ret );
	    continue;
	}
    }
    
    if ( ret == `next )
    {
	string sel = (string)UI::QueryWidget( `id ("workgroups"), `Value );
	y2milestone ("Setting workgroup '%1'",sel);
	Samba::setWorkgroup (sel);
	SambaServer::global_config ["workgroup"] = sel;
    }
    
    Wizard::RestoreBackButton ();

    return ret;
}

any Installation_Step2 () {

    string caption = _("Samba Installation") + " - " + _("Step 2 of 2");
    
    map<string, map<string,any> > proposal = SambaServer::ProposeRole (Samba::workgroup);
    
    y2milestone ("Proposal: %1", proposal);

    term contents = `VBox(
	`VSquash(`Left(`Label( _("Current Domain Name:") + " " + Samba::workgroup))),
	`VSpacing(1),
	`VSquash(`Frame(_("Type Selection for SAMBA Server"), `VBox(
	    `RadioButtonGroup(`id("samba_server_type"), `VBox(
		`VSpacing(1),
		`Left(`Label(_("The available options in the configuration dialogs
depend on the settings in this selection.
"))),
		`Left(`RadioButton(`id(`pdc), _("&Primary Domain Controller (PDC)"), proposal["pdc","propose"]:false)),
		`HBox(
		    `HSpacing(4),
		    `Left(`Label(proposal["pdc","message"]:""))),
		`Left(`RadioButton(`id(`bdc), _("B&ackup Domain Controller (BDC)"), proposal["bdc","propose"]:false)),
		`HBox(
		    `HSpacing(4),
		    `Left(`Label(proposal["bdc","message"]:""))),
		`Left(`RadioButton(`id (`standalone), _("No Domain &Controller"), proposal["standalone","propose"]:false)),
		`VSpacing(1)))))),
	`VStretch());

    Wizard::SetContents ( caption, contents, HELPS["inst_step2"]:"", true, true );
	
    UI::ChangeWidget ( `id (`pdc), `Enabled, proposal["pdc","possible"]:true );
    UI::ChangeWidget ( `id (`bdc), `Enabled, proposal["bdc","possible"]:true );

    any ret = nil;
    while(true) {
	ret = UI::UserInput();
	if ( ( ret == `abort || ret == `cancel ) && ! SambaServer::AbortFunction () )
	{
	    continue;
	}
	if ( ret == `back || ret == `next || ret == `abort || ret == `cancel ) {
	    if ( ret == `next )
	    {
		// store the value
		SambaServer::setRole ( (symbol) UI::QueryWidget (
		    `id ( "samba_server_type" ),
		    `CurrentButton
		));
	    }
	    break;
	}
	else {
	    y2error( "unexpected retcode: %1", ret );
	    continue;
	}
    }

    return ret;
}

/************************* initial wizard end **************************/

void ServiceWidgetInit (map<string, any> descr, any key)
{
    symbol status = SambaServer::ServiceEnabled () ? `enable: `disable;
    UI::ChangeWidget ( `id ( status ), `Value, true );
}

void ServiceWidgetStore (map<string, any> descr, any key)
{
    SambaServer::setServiceEnabled ( 
	UI::QueryWidget ( `id ("samba_server_type"), `CurrentButton ) == `enable 
    );
}

void IdentityWidgetInit (map<string, any> descr, any key)
{
    UI::ChangeWidget ( `id ( "workgroup_domainname" ), `Value, Samba::workgroup );
    UI::ChangeWidget ( `id ( "domain_controller" ), `Value, SambaServer::role );
    
    boolean wins = normalize_boolean (SambaServer::global_config["wins support"]: (string)nil, false);

    UI::ChangeWidget ( `id ( "wins_server_support"), `Value, wins );
    UI::ChangeWidget ( `id ( "remote_wins_server"), `Value, ! wins );
    UI::ChangeWidget ( `id( "wins_server_name" ), `Enabled, ! wins );
	    
    UI::ChangeWidget ( `id( "wins_server_name" ), `Value
	, SambaServer::global_config ["wins server"]:"" );

    UI::ChangeWidget ( `id( "netbios_hostname" ), `Value, SambaServer::netbios_name );
}

void IdentityWidgetStore (map<string, any> descr, any key)
{
    string sel = (string)UI::QueryWidget( `id ("workgroup_domainname"), `Value );
    y2milestone ("Setting workgroup '%1'",sel);
    Samba::setWorkgroup (sel);
    SambaServer::global_config ["workgroup"] = sel;

    symbol role = (symbol)UI::QueryWidget ( `id ( "domain_controller" ), `Value );
    y2milestone ("Setting role '%1'",role);
    SambaServer::setRole (role);
    
    if ( (boolean)UI::QueryWidget ( `id ( "wins_server_support"), `Value ) ) 
    {
	y2milestone ("Enabling wins support");
	SambaServer::global_config ["wins support"] = "yes";
    }
    else
    {
	SambaServer::global_config ["wins support"] = "no";
	SambaServer::global_config ["wins server"] = 
	    (string)UI::QueryWidget ( `id( "wins_server_name" ), `Value );
	y2milestone ("Disabling wins support, using server '%1'", SambaServer::global_config ["wins server"]:nil );
    }

    string value = (string)UI::QueryWidget ( `id( "netbios_hostname" ), `Value );
    
    // warn about the change
    if (! Mode::config && size(SambaServer::netbios_name)>0 && value != SambaServer::netbios_name)
    {
	Popup::Warning ( warnings["netbios"]:"" );
    }
    SambaServer::netbios_name = value;
    SambaServer::modified = true;
}

symbol IdentityWidgetHandle (string key, map event_descr)
{
    if ( event_descr["ID"]:nil == "wins_server_support" 
	|| event_descr["ID"]:nil == "remote_wins_server")
    {
	UI::ChangeWidget ( `id( "wins_server_name" ), `Enabled, event_descr["ID"]:nil == "remote_wins_server" );
    }

    else if( contains ( [ `ldap, `passdb, `global_settings], event_descr["ID"]:`cancel ) ) {
	return_tab = "identity";
	return event_descr["ID"]:`next;
    }
    return nil;
}


void SharesWidgetInit (map<string, any> descr, any key)
{
    list items = shares2items( SambaServer::shares );
    
    UI::ChangeWidget ( `id( `table ), `Items, items );
    UI::ChangeWidget( `id(`edit), `Enabled, size(SambaServer::shares)>0 );
    UI::ChangeWidget( `id(`delete), `Enabled, size(SambaServer::shares)>0 );
    UI::ChangeWidget( `id(`toggle), `Enabled, size(SambaServer::shares)>0 );
}

symbol SharesWidgetHandle (string key, map event_descr)
{
    symbol ret = (symbol) event_descr["ID"]:nil;

    integer id = (integer) UI::QueryWidget(`id(`table), `CurrentItem);

    if(ret == `edit && id != nil ) {
	SambaServerWidgets::shareToEdit = (string) select( (term) UI::QueryWidget(`id(`table), `Item(id) ), 2, nil );
	return_tab = "shares";
	return `edit;
    }
    else if(ret == `toggle && id != nil) {
	string share = (string) select( (term) UI::QueryWidget(`id(`table), `Item(id) ), 2, nil );
	SambaServer::enableShare( share, (SambaServer::shares[share, "commentout"]:false) );
	UI::ChangeWidget( `id(`table), `Items, shares2items( SambaServer::shares ) );
	UI::ChangeWidget( `id(`table), `CurrentItem, id );
	SambaServer::modified = true;
    }
    else if(ret == `add ) {
	return_tab = "shares";
	return `add;
    }
    else if(ret == `ldap || ret == `passdb ) {
	return_tab = "identity";
	return ret;
    }
    else if(ret == `delete && id != nil)
    {
	// confirmation dialog before deleting a share
	if  (Popup::ContinueCancel( sformat( _("Really 
delete share '%1'?

All its settings will be lost.
"), select( (term) UI::QueryWidget(`id(`table), `Item(id) ), 2, nil ) ) ) ) {
	    SambaServer::removeShare( (string) select( (term) UI::QueryWidget(`id(`table), `Item(id) ), 2, nil ) );
	    
	    UI::ChangeWidget( `id(`table), `Items, shares2items( SambaServer::shares ) );
	}
    }
    else if(ret == `filter_all)
    {
	list items = shares2items( SambaServer::shares );
	UI::ChangeWidget ( `id( `table ), `Items, items );
    }
    else if(ret == `filter_non_system)
    {
	list<string> system = ["homes","printers","print$"];
	list items = shares2items( 
	    filter (string share, map value, SambaServer::shares
		, ``(! contains (system, share) ) )
	);
	UI::ChangeWidget ( `id( `table ), `Items, items );
    }
    return nil;
}

void AddTrustedDomain ()
{
    term contents = `VBox (
	`Label (_("Enter the name of the trusted domain
and the password to access it.")),
	`VSpacing (1),
	`TextEntry (`id(`domain), _("&Domain:") ),
	`Password (`id(`password), _("&Password:") ),
	`VSpacing (1),
	`HBox (
	    `PushButton (`id (`ok), `opt (`default), Label::OKButton () ),
	    `PushButton (`id (`cancel), Label::CancelButton () )
	)
    );
    
    UI::OpenDialog (contents);
    UI::SetFocus (`id (`domain) );

    symbol ret = nil;    
    do 
    {
	ret = (symbol)UI::UserInput ();
	
	if (ret == `ok)
	{
	    string domain = (string) UI::QueryWidget (`domain, `Value);
	    string passwd = (string) UI::QueryWidget (`password, `Value);
	    
	    if ( size(domain) == 0 )
	    {
		import "Report";
		Report::Error (_("Domain name cannot be empty.") );
		ret = nil;
	    }
	    if (! SambaServer::EstablishTrustedDomain (domain, passwd) )
	    {
		import "Report";
		Report::Error (_("Cannot establish trusted domain relationship."));
		ret = nil;
	    }
	    
	    SambaServer::modified = true;
	}
    } while (ret == nil );
    
    
    UI::CloseDialog ();
}

boolean autoyast_warning_done = false;

void TrustedDomainsWidgetInit (map<string, any> descr, any key)
{

    if ( Mode::config && !autoyast_warning_done)
    {
	// issue a warning, if not already done so
	Popup::Warning (_("YaST needs to store a password for trusted domains
in the autoinstallation control file. The password
is stored as plain text. This can be considered
a security threat."));
	autoyast_warning_done = true;
    }
    
    list<term> domains = [];
    
    foreach (string key, boolean value, SambaServer::trusted_domains, ``{
	if (value) 
	{
	    domains = add (domains, `item ( `id(key), key ) );
	}
    });
    
    UI::ReplaceWidget (`id (`domains_tr), `SelectionBox( `id( "trusted_domains" ), _("&Trusted Domains List") , domains ) );

    // disable delete button if needed
    UI::ChangeWidget (`id (`delete_domain), `Enabled, size (domains) != 0);
}

symbol TrustedDomainsWidgetHandle (string key, map event_descr)
{
    if ( event_descr["ID"]:nil == `add_domain )
    {
	AddTrustedDomain ();
    }
    else if ( event_descr["ID"]:nil == `delete_domain )
    {
	string to_delete = (string)UI::QueryWidget (
	    `id ("trusted_domains"), `CurrentItem );
	    
	// confirmation
	if  (Popup::ContinueCancel( sformat( _("Really abadon trust relationship 
to trusted domain '%1'?"), to_delete ) )  )
	{
	    SambaServer::trusted_domains[to_delete] = false;
	    
	    SambaServer::modified = true;
	}
    }

    // reinitialize contents
    TrustedDomainsWidgetInit ($[], key);

    return nil;
}

/**
 * EditShareDialog dialog
 * @return dialog result
 */
symbol EditShareDialog () ``{

    term contents = `HBox (`HSpacing (1), `VBox (
        `VSpacing (1), 
        "share_edit"
    ), `HSpacing (1));

    // dialog caption
    string caption = sformat( _("Edit Share \"%1\""), SambaServerWidgets::shareToEdit );


    return CWM::ShowAndRun($[
	"widget_names" : ["share_edit"],
	"widget_descr" : SambaServerWidgets::widgets,
	"contents" : contents,
	"caption" : caption,
	"back_button" : Label::BackButton(),
	"next_button" : Label::OKButton(),
	"fallback_functions" : $[`abort: SambaServer::AbortFunction]
    ]);
}

symbol GlobalSettingsDialog () ``{

    term contents = `HBox (`HSpacing (1), `VBox (
        `VSpacing (1), 
        "globalsettings"
    ), `HSpacing (1));

    // dialog caption
    string caption = _("Expert Global Settings Configuration");

    symbol res = CWM::ShowAndRun($[
	"widget_names" : ["globalsettings"],
	"widget_descr" : SambaServerWidgets::widgets,
	"contents" : contents,
	"caption" : caption,
	"back_button" : Label::BackButton(),
	"next_button" : Label::OKButton(),
	"fallback_functions" : $[`abort: SambaServer::AbortFunction]
    ]);

    if (res == `next)
    {
	// update the rest of the settings using the entered ones
	
	Samba::setWorkgroup ( SambaServer::global_config["workgroup"]: (Samba::workgroup) );	
	SambaServer::add_machine_script = SambaServer::global_config["add machine script"]: (SambaServer::add_machine_script);
	SambaServer::domain_master = SambaServer::global_config["domain master"]: (SambaServer::domain_master);
	SambaServer::preferred_master = SambaServer::global_config["preferred master"]: (SambaServer::preferred_master);
	SambaServer::domain_master = SambaServer::global_config["domain master"]: (SambaServer::domain_master);
	SambaServer::netbios_name = SambaServer::global_config["netbios name"]: (SambaServer::netbios_name);
	SambaServer::domain_master = SambaServer::global_config["domain master"]: (SambaServer::domain_master);
	
	SambaServerPassdb::SetBackends ( splitstring( SambaServer::global_config["passdb backend"]:"", " ") );
	
	SambaServer::role = SambaServer::DetermineRole();
    }
    
    return res;
}

symbol AddShareDialog () ``{

    term contents = `HVSquash (`HBox (`HSpacing (1), `VBox ( `opt (`hstretch),
	`VSpacing (1),
	`Frame ( _("Identification:"),
	    `VBox (
		`TextEntry ( `id (`name), _("Share &Name:") ),
		`TextEntry (`id (`comment), _("Share &Description:") )
	    )
	),
	`Frame ( _("Share Type:"),
	    `HBox (
		`HSpacing ( 1 ),
		`VBox ( `opt ( `hstretch ),
		    `RadioButtonGroup( 
		    `VBox (
			`Left( `RadioButton( `id ( `printer), `opt( `notify ), _("&Printer") ) ),
			`Left( `RadioButton( `id ( `directory), `opt( `notify ), _("&Directory"), true ) )
		    )
		),
                `HBox(
            	    // translators: text entry label
            	    `TextEntry( `id(`path), _("Share &Path:"), "/home" ),
            	    `Bottom( `PushButton( `id( `browse ), Label::BrowseButton() ) )
        	)),
		`HSpacing ( 1 )
	    )
	)
    )));
    
    // translators: dialog caption
    string caption = _("Add New Share");

    Wizard::SetContentsButtons ( caption, contents, HELPS["add_share"]:"",
	Label::BackButton (), Label::OKButton () );
	
    UI::SetFocus ( `id (`name));

    symbol ret = nil;
    
    do 
    {
	// enable/disable path
	boolean on = (boolean)UI::QueryWidget ( `id( `directory ), `Value );
	UI::ChangeWidget ( `id (`path), `Enabled, on );
	UI::ChangeWidget ( `id (`browse), `Enabled, on );
	
	ret = (symbol)UI::UserInput ();
	
	if (ret == `printer || ret == `directory)
	{
	    ret = nil;
	    continue;
	}
	
	if (ret == `browse)
	{
            // translators: file selection dialog title
            string dir = UI::AskForExistingDirectory ( 
		(string)UI::QueryWidget (`id(`path), `Value)
		, _("Path for a Share") );
            if( dir != nil ) {
                UI::ChangeWidget( `id (`path), `Value, dir );
            }
            ret = nil;

	} else if (ret == `next) 
	{
	    // OK was pressed
	
	    string name = (string) UI::QueryWidget( `id( `name ), `Value );
	    string pathvalue = (string) UI::QueryWidget( `id( `path ), `Value );
	    string comment = (string) UI::QueryWidget( `id( `comment ), `Value );
	    boolean printable = (boolean) UI::QueryWidget (`id ( `printer ), `Value );
	
	    if( size( name ) == 0 ) {
		// translators: error message
		Popup::Error( _("Share name cannot be empty.") );
		ret = nil;
		continue;
	    } else if( size( pathvalue ) == 0 && ! printable ) {
		// translators: error message
		Popup::Error( _("Share path cannot be empty.") );
		ret = nil;
		continue;
	    } else if ( ! SambaServerWidgets::SharePathWarning (pathvalue) ) {
		ret = nil;
		continue;
	    } else if( !printable && ! Mode::config && SCR::Read( .target.stat, pathvalue ) == $[] ) {
		// translators: question popup. A user entered non-existent path
		// for a share
		if( !Popup::ContinueCancel( sformat( _("The path '%1' does not exist.
Really use this path?
"), pathvalue ) ) ) {
		    ret = nil;
		    continue;
		}
	    }
	    
	    map<string,any> res = $[
            	    "comment": comment,
            	];
	    
	    if (printable) 
	    {
		res["printable"] = true;
		res["path"] = "/var/tmp";
	    }
	    else
	    {
		res["writeable"] = true;
		res["path"] = pathvalue;
	    }

	    if (SambaServer::addShare( name , res ) != true) {
		// translators: popup error message for "add share"
		Popup::Error( sformat( _("Share '%1' already exists."), name ) );
		ret = nil;
	    }
	}
    } while( ret == nil );
    return ret;
}

boolean TabAbort () {

    if (TabWidget::Modified ())
    {
	SambaServer::modified = true;
    }
    
    return SambaServer::AbortFunction ();
}

any Installation_Conf_Tab () {

    map<string,any> firewall_settings = $[ "services" : [ "samba-server" ], "display_details" : true ];
    map<string,any> firewall_widget = CWMFirewallInterfaces::CreateOpenFirewallWidget(firewall_settings);
    string firewall_help = firewall_widget["help"]:"";
    term firewall_layout = firewall_widget["custom_widget"]:`VBox();

    term page_start_up = `HBox(
	`VBox(
	    `RadioButtonGroup(`id("samba_server_type"), `VBox(
		`Left(`RadioButton(`id(`enable), _("On -- &Enable Services Automatically and Start on Booting"))),
		`Left(`RadioButton(`id(`disable), _("Off -- &Disable Services"))))),
	    `VSpacing(1),
	    firewall_layout,
	    `VStretch()),
	`HStretch());

    term page_shares = `HBox(
	`HWeight(1, `Empty()),
	`HWeight(100, `VBox(
	    `VWeight(1, `HBox(
		`Left(`Label(_("Available shares are"))),
	        `HStretch(),
		`Right(`MenuButton(_("&Filter"), [
		    `item(`id(`filter_all), "Show &All Shares" ),
		    `item(`id(`filter_non_system), "Do Not Show &System Shares" )])))),
	    `VWeight(5,
		// translators: table header texts
		`Table ( `id ( `table ), `opt(`hvstretch), `header(_("Status"), _("Name"),  _("Path"), _("Comment")), [])),
	    `VWeight(1, `HBox(
		`PushButton(`id(`add), Label::AddButton() + "..."),
		`PushButton(`id(`edit), Label::EditButton() + "..."),
		`PushButton(`id(`delete), Label::DeleteButton()),
		`HStretch(),
		`PushButton(`id(`toggle), _("&Toggle Status")))),
	    `VStretch())),
	`HWeight(1, `Empty()));

    list<term> roles = [
	// translators: combobox item
	`item ( `id ( `standalone ), _("No DC") ),
	// translators: combobox item
	`item ( `id ( `pdc ), _("Primary (PDC)") )
	];

    if (ProductFeatures::ui_mode != "simple") {
	// translators: combobox item
	roles = add( roles, `item ( `id ( `bdc ), _("Backup (BDC)") ));
    }
    
    term page_identity_wins = `HWeight(10, `Frame(_("WINS"), `HBox(
	`HSpacing(1),
	`VBox(`opt(`hstretch),
	    `RadioButtonGroup(`id("wins_support"),`VBox(
		`Left(`RadioButton(`id("wins_server_support"), `opt(`notify ), _("WINS Server Support"))),
		`Left(`RadioButton(`id("remote_wins_server"), `opt(`notify ), _("Remote WINS Server"))))),
	    `HBox(
	        `HSpacing(3),
		`TextEntry(`id("wins_server_name"), `opt(`hstretch), _("Na&me:"))),
	    `VStretch()),
	`HSpacing(1))));

    term page_identity_base = `HWeight(10, `Frame(_("Base Settings"), `HBox(
        `HSpacing(1),
	`VBox(`opt(`hstretch),
	    `ComboBox(`id("workgroup_domainname"), `opt(`editable, `hstretch ), _("&Workgroup or Domain Name"),
		maplist( string key, boolean value, Samba::PreprocessAvailableWorkgroups (), ``(key))),
	    // translators: combobox label
	    `ComboBox(`id("domain_controller"), `opt(`hstretch ), _("Domain &Controller"),  roles),
	    `VStretch()),
	`HSpacing(1))));
	
    term page_identity = `HBox(
	`HWeight(1, `Empty()),
	`HWeight(30, `VBox(`opt(`hstretch),
	    `HStretch(),
	    `Top(`HBox(
			page_identity_base,
			`HSpacing(1),
			(ProductFeatures::ui_mode == "simple") ? `VSpacing(0) : page_identity_wins,
			`HStretch ())),
	    `VBox(
		`VSpacing(1),
		`TextEntry(`id("netbios_hostname"), `opt(`hstretch ), _("NetBIOS &Host Name")),
		`MenuButton(_("Advanced Settings..."), [
			`item(`id(`global_settings), _("&Expert Global Settings")),
			`item(`id(`ldap), _("&LDAP Settings")),
			`item(`id(`passdb), _("&User Authentication Sources")) ] )),
	    `VStretch())),
	`HWeight(1, `Empty()),
	`HStretch());

    term page_trusted_domains = `HBox(
	`HWeight(1, `Empty()),
	`HWeight(100, `VBox(
	    `VWeight(7, `ReplacePoint(`id(`domains_tr),
		`SelectionBox(`id("trusted_domains"), _("&Trusted Domains List"), [] ))),
	    `VWeight(1, `HBox(
		`PushButton(`id(`add_domain), Label::AddButton() + "..."),
		`PushButton(`id(`delete_domain), Label::DeleteButton()),
		`HStretch())),
	    `VStretch())),
	`HWeight(1, `Empty()));

    string caption = _("Samba Configuration");

    list tab_list = [
	CWM::prepareWidget($[
    	    "id" : "startup",
            "header" : _("Start &Up"),
	    "widget" : `custom,
	    "custom_widget" : page_start_up,
	    "init" : ServiceWidgetInit,
	    "store" : ServiceWidgetStore,
	    "help": HELPS["smb_conf_tab_startup"]:"" + firewall_help
	]),
        CWM::prepareWidget($[
            "id" : "shares",
            "header" : _("&Shares"),
	    "widget" : `custom,
	    "custom_widget" : page_shares,
	    "init" : SharesWidgetInit,
	    "handle" : SharesWidgetHandle,
	    "help": HELPS["smb_conf_tab_shares"]:""
	]),
        CWM::prepareWidget($[
            "id" : "identity",
            "header" : _("I&dentity"),
	    "widget" : `custom,
	    "custom_widget" : page_identity,
	    "init" : IdentityWidgetInit,
	    "handle" : IdentityWidgetHandle,
	    "store" : IdentityWidgetStore,
	    "help": HELPS["smb_conf_tab_identity"]:""
	])
    ];
    
    if (ProductFeatures::ui_mode != "simple") {
	tab_list = add(tab_list, CWM::prepareWidget($[
            "id": "trusted_domains",
            "header": _("&Trusted Domains"),
	    "widget": `custom,
	    "custom_widget": page_trusted_domains,
	    "init": TrustedDomainsWidgetInit,
	    "handle": TrustedDomainsWidgetHandle,
	    "help": HELPS["smb_conf_tab_trusted_domains"]:""
	]));
    }

    map widgets =  $[
	"overview":TabWidget::CreateTabWidgetDescr($[], $["tabs":tab_list, "start_tab":return_tab])
    ];
    
    return_tab = "startup";

    term contents = `VBox( "overview", `VStretch ());

    list<map <string, any> > w = CWM::CreateWidgets (["overview"], (map <string, map <string, any> >)widgets);
    string help = CWM::MergeHelps (w);
    contents = CWM::PrepareDialog (contents, w);

    Wizard::SetContentsButtons (caption, contents, help,
        Label::NextButton (), Label::FinishButton ());
    Wizard::HideBackButton ();
    
    any ret = CWM::Run (w, $[`abort: TabAbort ]);
    
    Wizard::RestoreBackButton ();
    
    return ret;
}


/**
 * Dialog to configure passdb backends.
 * @return dialog result
 */
symbol PassdbDialog () {
    // dialog caption
    string caption = _("User Information Sources");

    list<map<string, any> > w = CWM::CreateWidgets (["passdb_edit"], (map <string, map <string, any> >)SambaServerWidgets::widgets);

    term contents = `HBox (`HSpacing (1), `VBox (
        `VSpacing (1), 
	w[0, "widget"]:`VSpacing (0)
    ), `HSpacing (1));

    string help = CWM::MergeHelps (w);

    Wizard::SetContentsButtons (caption, contents, help,
        Label::BackButton (), Label::OKButton ());

    UI::ReplaceWidget( `id(`_tp_table_repl),
        // translators: menu button label for accessing the LDAP-related settings and actions
        `MenuButton( "LDAP",
	    // translators: menu item to show a LDAP-related settings
	    [ `item( `id(`ldap), _("Global LDAP Settings") ),
	      // translators: menu item to test the currently selected LDAP url
	      `item( `id(`ldap_test), _("Test LDAP Connection") ),
	    ]
	) 
    );

    return CWM::Run (w, $[`abort: SambaServer::AbortFunction]);
}

/**
 * LDAP Dialog
 * @return dialog result
 */
symbol LDAPDialog () ``{

    /* Samba-server advanced dialog caption */
    string caption = _("LDAP Samba Server Options");

    /* Samba-server advanced dialog contents */
    term contents = 
    `VBox(
	// text entry label
	`TextEntry( `id( `ldap_suffix ), _("Search &Base DN:"), 
	    SambaServer::LDAP_suffix != nil ? SambaServer::LDAP_suffix: "" ),
	// text entry label
	`TextEntry( `id( `ldap_admin_dn ), _("&Administration DN:"), 
	    SambaServer::LDAP_admin_dn != nil ? SambaServer::LDAP_admin_dn : ""  ),
	Mode::config ? `Empty() : 
	    `HBox(
		// push button label
		`PushButton( `id( `ldap_password ), _("Set LDAP Administration &Password") )
	    )
    );

    Wizard::SetContentsButtons(caption, contents, HELPS["Advanced"]:"",
	    Label::BackButton(), Label::OKButton());

    any ret = nil;
    while(true) {

	ret = UI::UserInput();
	
	/* abort? */
	if(ret == `abort || ret == `cancel) {
	    if(SambaServer::AbortFunction()) break;
	    else continue;
	}
	else if(ret == `ldap_password ) {
	    // Translators: popup query for a password
	    string passwd = passwordPopup( sformat( _("Enter LDAP Administration Password"), Samba::workgroup ) );
	    // user cancelled
	    if( passwd == nil ) continue;
	    
	    string admin_dn = (string) UI::QueryWidget( `id( `ldap_admin_dn ), `Value );
	    string suffix = (string) UI::QueryWidget( `id( `ldap_suffix ), `Value );
	    if (size(admin_dn) == 0 || size(suffix) == 0) 
	    {
		y2milestone ("Empty admin dn or suffix");
		// FIXME: better message after freeze
		Popup::Error( _("Cannot set the password.") );
		continue;
	    }
	    
	    // store the current bind DN
	    SambaServer::setLDAPAdminDN( admin_dn  );
	    
	    string error = SambaServer::setLDAPAdminPassword( passwd );
	    if(  error != nil )
	    {
		Popup::Error( error );
	    }
	    // Translators: Information popup
	    else Popup::Message( _("LDAP administration password was successfully changed.") );
	}
        else if(ret == `next ) {
	    SambaServer::setLDAPAdminDN( (string) UI::QueryWidget( `id( `ldap_admin_dn ), `Value ) );
	    SambaServer::setLDAPSuffix( (string) UI::QueryWidget( `id( `ldap_suffix ), `Value ) );

            break;
        }
	else if(ret == `back ) {
	    break;
	}
        else {
            y2error("unexpected retcode: %1", ret);
            continue;
        }
    }
    
    return (symbol) ret;
}

/* EOF */
}
