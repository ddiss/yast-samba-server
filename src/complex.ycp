/**
 * File:	include/samba-server/complex.ycp
 * Package:	Configuration of samba-server
 * Summary:	Dialogs definitions
 * Authors:	Stanislav Visnovsky <visnov@suse.cz>
 *		Lukas Ocilka <locilka@suse.cz>
 *
 * $Id$
 */

{

textdomain "samba-server";

import "Wizard";

import "SambaServer";
import "SambaService";
import "Progress";
import "Report";
import "FileUtils";
import "Popup";

include "samba-server/helps.ycp";

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() ``{
    Wizard::RestoreHelp(HELPS["read"]:"");
    boolean ret = SambaServer::Read();
    return ret ? `next : `abort;
}

// replace with Progress::status() after accepted into the build
// Function returns current progress status
boolean ProgressStatus () {
    // set new progress
    boolean old_progress = Progress::set(false);
    // set old progress back
    Progress::set(old_progress);
    // return current progress
    return old_progress;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() ``{
    Wizard::RestoreHelp(HELPS["write"]:"");
    // Bugzilla #120080 - 'reload' instead of 'restart'
    // If there some connected users, SAMBA is running and should be running also after the Write() operation
    //    and the Progress was turned on before Writing SAMBA conf
    list <string> connected_users = SambaService::ConnectedUsers();
    y2milestone("Number of connected users: %1", size(connected_users));
    boolean report_restart_popup = (
	(size(connected_users)>0) && SambaService::GetServiceRunning() &&
	SambaService::GetServiceAutoStart() && ProgressStatus()
    );

    boolean ret = SambaServer::Write(false);

    // If popup should be shown and SAMBA is still/again running
    if (report_restart_popup && SambaService::GetServiceRunning()) {
	// TRANSLATORS: a popup message
	Report::Message(_("Because users are currently connected to this Samba server,
the server configuration has been reloaded instead of restarted.
To confirm that all settings are applied despite possibly disconnecting the users,
run '/etc/init.d/smb restart' and '/etc/init.d/nmb restart'"));
    }
    return ret ? `next : `abort;
}

/**
 * Checks whether the path (directory) exists and return a boolean
 * value whether everything is OK or user accepted the behavior as
 * despite some errors. If the directory doesn't exist, it offers
 * to create it (and eventually creates it).
 *
 * @param string pathvalue (directory)
 * @return boolean whether everything was OK or whether user decided to ignore eventual errors
 */
boolean CheckAndCreatePath (string pathvalue) {
    string check_path = pathvalue;

    // remove the final slash
    if (regexpmatch(check_path, "/$")) check_path = regexpsub(check_path, "^(.*)/$", "\\1");
    y2milestone("Checking existency of %1 path", check_path);

    // Directory (path) already exists
    if (FileUtils::Exists(check_path)) {
        y2milestone("Path %1 exists", check_path);
        // Directory (path) is a type 'directory'
        if (FileUtils::IsDirectory(check_path)) {
            return true;
        // Directory (path) is not a valid 'directory'
        } else {
            y2warning ("Path %1 is not a directory", check_path);
            // Continue despite the error?
            return Popup::ContinueCancel(sformat(
                // TRANSLATORS: popup question (with continue / cancel buttons)
                // %1 is the filesystem path
                _("Although the path %1 exists, it is not a directory.\nWould you like to continue or cancel the operation?"),
                pathvalue
            ));
        }
    // Directory (path) doesn't exist, trying to create it if wanted
    } else {
	y2milestone("Path %1 does not exist", check_path);
        if (Popup::YesNo(sformat(
	    // TRANSLATORS: question popup (with yes / no buttons). A user entered non-existent path
	    // for a share, %1 is entered path
	    _("The path %1 does not exist.\nWould you like to create it now?"),
            pathvalue
	))) {
            // Directory creation successful
            if ((boolean) SCR::Execute(.target.mkdir, check_path)) {
		y2milestone("Directory %1 successfully created", check_path);
                return true;
            // Failed to create the directory
            } else {
                y2warning("Failed to create directory %1", check_path);
                // Continue despite the error?
                return Popup::ContinueCancel(sformat(
                    // TRANSLATORS: popup question (with continue / cancel buttons)
                    // %1 is the name (path) of the directory
                    _("Failed to create the directory %1.\nWould you like to continue or cancel the current operation?"),
                    pathvalue
                ));
            }
        // User doesn't want to create the directory
        } else {
            y2warning("User doesn't want to create the directory %1", check_path);
            return true;
        }
    }
}


/* EOF */
}
