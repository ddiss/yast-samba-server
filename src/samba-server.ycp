/**
 * File:	clients/samba-server.ycp
 * Package:	Configuration of samba-server
 * Summary:	Main file
 * Authors:	Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 *
 * Main file for samba-server configuration. Uses all other files.
 */

{

/***
 * <h3>Configuration of the samba-server</h3>
 */

textdomain "samba-server";

import "CommandLine";
import "Report";
import "Require";
import "Samba";
import "SambaServer";

include "commandline/commandline.ycp";

/**
 * Command line "share" commands handler.
 *
 * @param options	map of options from command line
 * @return boolean	true on success
 */
global define boolean ShareHandler(map options) ``{
    string share = options["name"]:nil;
    
    // check the "command" to be present exactly once
    string command = CommandLine::UniqueOption( options, 
	["add", "delete", "enable", "disable", "options", "show" ] );
    if( command == nil ) return false;

    // validate the options
    if( share == nil ) {	
	// translators: error message for share command line action
	// must provide the share name
	Report::Error( sformat( _("You must specify the name of a share.") ) );
	return false;
    }
    
    if( !haskey( SambaServer::shares, share ) && command != "add" ) {
	// translators: error message for "share add" command line action
	Report::Error( sformat( _("The share '%1' does not exist."), share ) );
	return false;
    }
    
    // process the commands
    if( command == "enable" )
    {
	SambaServer::enableShare( share, true );
    }
    else if( command == "disable" )
    {
	SambaServer::enableShare( share, false );
    }
    else if( command == "delete" )
    {
	SambaServer::removeShare( share );
    }
    else if( command == "add" )
    {
	if( ! haskey( options, "path" ) ) {
	    // translators: error message for "add share" command line action
	    Report::Error( _("You must provide the path of a directory to be shared.") );
	    return false;
	}
	
	if( !SambaServer::addShare( share, $[
	    "path": options["path"]:"",
	    "comment": options["comment"]:sformat( "Share for %1", options["path"]:"path" )
	] ) ) {
	    // translators: error message for "add share" command line action
	    Report::Error( sformat( _("Share '%1' already exists."), share ) );
	    return false;
	}
    }
    else if( command == "show" )
    {
	CommandLine::Print( sformat("[%1]", share) );
	
	foreach( string option, any value, SambaServer::shares[share]:$[], ``{
	    if( value != nil )
		CommandLine::Print( sformat( "\t%1 = %2", option, value ) );
	});
    }
    else if( command == "options" )
    {
	map opts = eval(SambaServer::shares[share]:$[]);
	
	string value = options["comment"]:nil;
	if( value != nil ) opts["comment"] = value;
	
	value = options["path"]:nil;
	if( value != nil ) opts["path"] = value;

	value = options["printable"]:nil;
	if( value != nil ) opts["printable"] = normalize_boolean(value, false);

	value = options["write list"]:nil;
	if( value != nil ) opts["write list"] = value;

	value = options["browseable"]:nil;
	if( value != nil ) opts["browseable"] = normalize_boolean(value, true);

	value = options["guest_ok"]:nil;
	if( value != nil ) opts["guest ok"] = normalize_boolean(value, false);

	value = options["valid_users"]:nil;
	if( value != nil ) opts["valid users"] = value;
	
	SambaServer::updateShare( share, opts );
    }
    
    return true;
}

/**
 * Command line "list" command handler.
 *
 * @param options	map of options from command line
 * @return boolean	true on success
 */
global define boolean ListHandler( map options ) ``{
    
    // translators: heading for "list" shares command line action
    // try to keep alignment
    CommandLine::Print( _("Status  \tType\tName
=============================="));

    map printers = $[];
    
    foreach( string share, map options, SambaServer::shares, ``{
	if( options["printable"]:false ) {
	    printers[share] = options;
	} else {
	    // translators: share is a disk. %1 is the status, %2 comment
	    CommandLine::Print( sformat( _("%1\tDisk\t%2"), 
		// translators: share status
		options["commentout"]:false ? _("Disabled")
		// translators: share status
		    : _("Enabled")+"  ", share ) );
	}
    });
    

    foreach( string share, map options, printers, ``{
	// translators: share is a printer. %1 is the status, %2 comment
	CommandLine::Print( sformat( _("%1\tPrinter\t%2"), 
	    options["commentout"]:false ? 
		// translators: share status
		_("Disabled")
		// translators: share status
		: _("Enabled")+"  ", share ) );
    });
    
    return true;
}

/**
 * Command line "backend" command handler.
 *
 * @param options	map of options from command line
 * @return boolean	true on success
 */
global define boolean BackendHandler( map options ) ``{
    // check the backend to be present exactly once
    string command = CommandLine::UniqueOption( options, 
	["smbpasswd", "ldap" ] );
    if( command == nil ) return false;

    symbol backend = nil;
    if( command == "smbpasswd" ) backend = `smbpasswd;
    else if( command == "ldap" ) backend = `ldap;
     
    if( ! SambaServer::switchLDAPBackend( backend ) ) {
	// translators: error message for backend command line action, %1 is the backend user wanted to switch to
	Report::Error( sformat( _("Cannot change the backend of the Samba server to '%1'."), command ) );
	return false;
    }
    
    return true;
}

/**
 * Command line "role" command handler.
 *
 * @param options	map of options from command line
 * @return boolean	true on success
 */
global define boolean RoleHandler( map options ) ``{
    // check the role to be present exactly once
    string command = CommandLine::UniqueOption( options, 
	["pdc", "bdc", "standalone" ] );
    if( command == nil ) return false;
    
    symbol role = nil;
    
    if( command == "pdc" ) role = `pdc;
    else if( command == "bdc" ) role = `bdc;
    else if( command == "standalone" ) role = `standalone;
    
    if( ! SambaServer::setRole( role ) ) {
	// translators: error message for role command line action, %1 is the role user wanted to switch to
	Report::Error( sformat( _("Cannot change the role of the Samba server to '%1'."), command ) );
	return false;
    }
    
    return true;
}

/**
 * Command line "service" command handler.
 *
 * @param options	map of options from command line
 * @return boolean	true on success
 */
global define boolean SambaServerEnableHandler( map options ) ``{
    // check the "command" to be present exactly once
    string command = CommandLine::UniqueOption( options, 
	["enable", "disable" ] );
    if( command == nil ) return false;

    if( command == "enable" ) {
	// TODO: maybe we should switch back to the original role (use the heuristics again)
	if( SambaServer::role == `disabled ) SambaServer::setRole( `standalone );
	return SambaServer::enableServer( true );
    }

    if( command == "disable" ) {
	SambaServer::setRole( `disabled );
	return SambaServer::enableServer( false );
    }
    
    // should not happen
    return false;
}

/**
 * Command line "configure" command handler.
 *
 * @param options	map of options from command line
 * @return boolean	true on success
 */
global define boolean ChangeConfiguration( map options ) ``{
	
    string value = options["workgroup"]:nil;
    if( value != nil ) Samba::setWorkgroup(value);

    string value = options["description"]:nil;
    if( value != nil ) SambaServer::setDescription(value);

    string value = options["ldap_server"]:nil;
    if( value != nil ) SambaServer::setLDAPServer(value);

    string value = options["ldap_suffix"]:nil;
    if( value != nil ) SambaServer::setLDAPSuffix(value);

    string value = options["ldap_admin_dn"]:nil;
    if( value != nil ) SambaServer::setLDAPAdminDN(value);

    return true;
}

/* The main () */
y2milestone ("----------------------------------------");
y2milestone ("Samba-server module started");

include "samba-server/wizards.ycp";

/* main ui function */
any ret = nil;

map cmdline = $[
    "id" 		: "samba-server",
    // translators: command line help text for samba-server module
    "help" 		: _("Samba server configuration module.
See Samba documentation for details."),
    "guihandler" 	: ``(SambaServerSequence()),
    "initialize"	: ``(SambaServer::Read()),
    "finish"		: ``(SambaServer::Write()),
    "actions"		: $[
	"share"	:$[
	    "handler"	: ``(ShareHandler()),
	    // translators: command line help text for share action
	    "help"	: _("Manipulate a single share")
	],
	"list"	:$[
	    "handler"	: ``(ListHandler()),
	    // translators: command line help text for list action
	    "help"	: _("Show the list of available shares")
	],
	"role"	:$[
	    "handler"	: ``(RoleHandler()),
	    // translators: command line help text for role action
	    "help"	: _("Set a role of the server")
	],
	"backend" :$[
	    "handler"	: ``(BackendHandler()),
	    // translators: command line help text for backend selection action
	    "help"	: _("Set the backend for storing user information")
	],
	"service" :$[
	    "handler"	: ``(SambaServerEnableHandler()),
	    // translators: command line help text for service activation action
	    "help"	: _("Enable or disable the Samba services (smb and nmb)")
	],
	"configure"	: $[
	    "handler"	: ``(ChangeConfiguration()),
	    // translators: command line help text for configure action
	    "help"	: _("Change the global settings of the Samba server")
	]
    ],
    "options"		: $[
	"enable" 	:$[
	    // translators: command line help text for enable option
	    "help"	: _("Enable the share or a service")
	],
	"disable"	:$[
	    // translators: command line help text for disable option
	    "help"	: _("Disable the share or a service")
	],
	"delete"	:$[
	    // translators: command line help text for delete share option
	    "help"	: _("Remove the share from the configuration file" )
	],
	"name"		:$[
	    // translators: command line help text for share name option
	    "help"	: _("The name of a share"),
	    "type"	: "string"
	],
	"add"		:$[
	    // translators: command line help text for "share add" subaction
	    "help"	: _("Add a new share"),
	], 
	"options"	:$[
	    // translators: command line help text for "share options" subaction
	    "help"	: _("Change options of a share"),
	], 
	"show"		:$[
	    // translators: command line help text for "share show" subaction
	    "help"	: _("Show the options of a shae"),
	], 
	"comment"	:$[
	    // translators: command line help text for share comment option
	    "help"	: _("The comment of a share"),
	    "type"	: "string"
	], 
	"path"		:$[
	    // translators: command line help text for share path option
	    "help"	: _("The path (directory) to be shared"),
	    "type"	: "string"
	], 
	"printable"	:$[
	    // translators: command line help text for share printable option
	    "help"	: _("Flag if the share should act as a printer"),
	    "type"	: "boolean"
	], 
	"read_list"	:$[
	    // translators: command line help text for share read_list option
	    "help"	: _("A comma separated list of users allowed to read from the share"),
	    "type"	: "string"
	], 
	"write_list"	:$[
	    // translators: command line help text for share write_list option
	    "help"	: _("A comma separated list of users allowed to write to the share"),
	    "type"	: "string"
	], 
	"browseable"	:$[
	    // translators: command line help text for share browseable option
	    "help"	: _("Flag if the share should be visible by browsing LAN"),
	    "type"	: "boolean"
	], 
	"guest_ok"	:$[
	    // translators: command line help text for share guest_ok option
	    "help"	: _("Flag if the share should allow guest access"),
	    "type"	: "boolean"
	], 
	"valid_users"	:$[
	    // translators: command line help text for share valid_users option
	    "help"	: _("A comma separated list of users allowed to access the share"),
	    "type"	: "string"
	],
	"pdc"		:$[
	    // translators: command line help text for PDC role option
	    "help"	: _("Server should act as a Primary Domain Controller"),
	], 
	"bdc"		:$[
	    // translators: command line help text for BDC role option
	    "help"	: _("Server should act as a Backup Domain Controller"),
	], 
	"standalone"	:$[
	    // translators: command line help text for standalone server role option
	    "help"	: _("Server should provide shares, but should not allow domain logons."),
	],
	"smbpasswd"	:$[
	    // translators: command line help text for smbpasswd option
	    "help"	: _("Use the 'smbpasswd' file to store user information"),
	],
	"ldap"		:$[
	    // translators: command line help text for ldap option
	    "help"	: _("Use the LDAP server to store user information"),
	],
	"workgroup"	:$[
	    // translators: command line help text for workgroup option
	    "help"	: _("The name of a workgroup"),
	    "type"	: "string"
	], 
	"description"	:$[
	    // translators: command line help text for description option
	    "help"	: _("The human-readable description for the Samba server"),
	    "type"	: "string"
	], 
	"ldap_server"	:$[
	    // translators: command line help text for ldap_server option
	    "help"	: _("The LDAP server to be used"),
	    "type"	: "host"
	], 
	"ldap_suffix"	:$[
	    // translators: command line help text for ldap_suffix option
	    "help"	: _("The LDAP suffix DN used for manipulating the user information on LDAP server"),
	    "type"	: "string"
	], 
	"ldap_admin_dn"	:$[
	    // translators: command line help text for ldap_admin_dn option
	    "help"	: _("The LDAP DN for modifying contents of the LDAP server (for example changing passwords)"),
	    "type"	: "string"
	]
    ],
    "mappings"		: $[
	"share"		: [ "enable", "disable", "delete", "add", "options", "show", 
	    "name", "comment", "path", 
	    "printable", "read_list", "write_list", "browseable", "guest_ok", "valid_users" ],
	"list"		: [ ],
	"role"		: [ "pdc", "bdc", "standalone" ],
	"backend" 	: [ "smbpasswd", "ldap" ],
	"service" 	: [ "enable", "disable" ],
	"configure"	: [ "workgroup", "description", "ldap_server", "ldap_suffix", "ldap_admin_dn" ]
    ]
];

/* ensure samba package is installed */
if( !Require::RequireAndConflictTarget( ["samba"], [], 
        // notification about package needed 1/2
    _("<p>To configure the Samba server, the <b>%1</b> package must be installed.</p>") +
        // notification about package needed 2/2
    _("<p>Do you want to install it now?</p>")) )
{
    return `auto;
}

ret = CommandLineRun( cmdline );

y2debug("ret=%1", ret);

/* Finish */
y2milestone("Samba-server module finished");
y2milestone("----------------------------------------");

return ret;

/* EOF */
}
