/**
 * File:	include/samba-server/wizards.ycp
 * Package:	Configuration of samba-server
 * Summary:	Wizards definitions
 * Authors:	Stanislav Visnovsky <stanislav.visnovsky@suse.cz>
 *
 * $Id$
 */

{

textdomain "samba-server";

import "Sequencer";
import "Wizard";
import "Mode";
import "Directory";

include "samba-server/complex.ycp";
include "samba-server/dialogs.ycp";

/**
 * Main workflow of the samba-server configuration
 * @return sequence result
 */
any MainSequence() {

    map aliases = $[
	"inst_step1"	: ``( Installation_Step1() ),
	"inst_step2"	: ``( Installation_Step2() ),
	"conf_tab"	: ``( Installation_Conf_Tab() ),
        "share_edit"    : ``( EditShareDialog() ),
	"share_add"	: ``( AddShareDialog() ),
        "passdb_edit"   : ``( PassdbDialog() ),
        "ldap_edit"     : ``( LDAPDialog() ),
	// another call of the same dialog (cause of handling the dialogs continuity)
	"ldap_edit_uas"	: ``( LDAPDialog() ),
        "global_settings"     :   ``( GlobalSettingsDialog() ),
    ];

    map sequence = $[
	"ws_start"	: "inst_step1",
	"inst_step1"	: $[
	    `cancel	: `cancel,
	    `abort	: `abort,
	    `next	: "inst_step2"
	],
	"inst_step2"	: $[
	    `back	: "inst_step1",
	    `cancel	: `cancel,
	    `abort	: `abort,
	    `next	: "conf_tab"
	],
	"conf_tab"	: $[
	    `cancel	: `cancel,
	    `abort	: `abort,
	    `add	: "share_add",
	    `edit	: "share_edit",
            `ldap   	: "ldap_edit",
            `passdb   	: "passdb_edit",
            `global_settings  	: "global_settings",
	    `next	: `finish,
	],
	"global_settings" : $[
	    `cancel	: `cancel,
	    `abort	: `abort,
	    `next	: "conf_tab"
	],
	"share_edit"	: $[
	    `cancel	: `cancel,
	    `abort	: `abort,
	    `next	: "conf_tab"
	],
	"share_add"	: $[
	    `cancel	: `cancel,
	    `abort	: `abort,
	    `next	: "conf_tab"
	],
        "passdb_edit"   : $[
            `abort  	: `abort,
	    `cancel 	: `cancel,
            `next   	: "conf_tab",
	    `ldap	: "ldap_edit_uas",
        ],
	// new calling for the dialog (it depends on where the call started)
        "ldap_edit_uas"     :  $[
	    `cancel	: `cancel,
            `abort  	: `abort,
	    // This changes the logic of dialogs continuity but the change seems to be logical
	    // - we are returning to the dialog where we selected from two options:
	    // "Test LDAP" or "Configure LDAP"
	    // It makes much more sense for me :->
	    `next	: "passdb_edit",
        ],
        "ldap_edit"     :  $[
	    `cancel	: `cancel,
            `abort  	: `abort,
            `next   	: "conf_tab",
        ],
    ];
    
    // setup the abort function
    SambaServer::AbortFunction = SambaServer::ServerReallyAbort;
    
    // check if the main config file is modified already
    map res = (map)SCR::Execute (.target.bash_output, "rpm -V samba-client | grep '/etc/samba/smb\.conf'" );
    boolean config_changed = false;
    
    if (res["exit"]:0 == 0 && size( res["stdout"]:"" ) > 0 )
    {
	config_changed = true;
	y2milestone ("Config file has beed changed already" );
    }
    
    // run wizard only first time and not in autoyast
    if (SCR::Read( .target.stat, Directory::vardir + "/samba_server_done_once" ) != $[]
	|| Mode::config || config_changed
    )
    {
	sequence["ws_start"] = "conf_tab";
	
	if (!Mode::config)
	{
	    return_tab = "shares";	
	}
    }

    any ret = Sequencer::Run(aliases, sequence);

    return ret;
}

/**
 * Whole configuration of samba-server
 * @return sequence result
 */
any SambaServerSequence() {

    map aliases = $[
	"read"  : [ ``( ReadDialog() ), true ],
	"main"	:   ``( MainSequence() ),
	"write" : [ ``( WriteDialog() ), true ]
    ];

    map sequence = $[
	"ws_start" : "read",
	"read" : $[
	    `abort	: `abort,
	    `next	: "main"
	],
	"main" : $[
	    `cancel	: `abort,
	    `abort	: `abort,
	    `finish	: "write"
	],
	"write" : $[
	    `abort	: `abort,
	    `next	: `next
	]
    ];

    Wizard::CreateDialog();

    any ret = Sequencer::Run(aliases, sequence);

    UI::CloseDialog();
    return ret;
}

/**
 * Whole configuration of samba-server but without reading and writing.
 * For use with autoinstallation.
 * @return sequence result
 */
any SambaServerAutoSequence() {

    /* Initialization dialog caption */
    string caption = _("Samba Server Configuration");
    /* Initialization dialog contents */
    term contents = `Label(_("Initializing..."));

    Wizard::CreateDialog();
    Wizard::SetContentsButtons(caption, contents, "",
	    Label::BackButton(), Label::NextButton());

    any ret = MainSequence();

    UI::CloseDialog();
    return ret;
}

/* EOF */
}
