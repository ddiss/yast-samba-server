/**
 * File:	include/samba-server/routines.ycp
 * Package:	Configuration of samba-server
 * Summary:	Miscelanous functions for configuration of samba-server.
 * Authors:	Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{

textdomain "samba-server";

import "Report";

/********************************** non UI routines ************************/

/**
 * Convert string value to a normalized boolean ("yes", "1", "true" -> true).
 * @param value		the string value
 * @param default	the default value for value == nil
 * @return boolean	the converted value or default
 */
boolean normalize_boolean( string value, boolean default ) ``{
    if( value == nil ) return default;
    string s = toupper( value );
    return ( s == "YES" || s == "1" || s == "TRUE" );
}

/**
 * Convert string value to a normalized string ("yes", "1", "true" -> true).
 * Used if the smb.conf value can be also "auto". Then do not change the value.
 * @param value		the string value
 * @param default	the default value for value == nil
 * @return string	the converted value or default
 */
string normalize_string( string value, string default ) ``{
    if( value == nil ) return default;
    string s = toupper( value );
    if ( s == "YES" || s == "1" || s == "TRUE" ) return "yes";
    if ( s == "NO" || s == "0" || s == "FALSE" ) return "no";
    return value;
}

/**
 * Return true, if the value is yes or auto (= enabled).
 *
 * @param value		string value
 * @return boolean	true if it is yes or auto
 */
boolean yes_or_auto( string value ) ``{
    return toupper( value ) == "AUTO" || normalize_boolean( value, false);
}

/**
 * Convert share description to items for a table (index, status, name, comment).
 *
 * @param shares	map of available shares
 * @return list 	list of table items
 */
list shares2items( map<string,map> shares ) ``{
    integer index = 0;
    return maplist( string name, map descr, shares, ``{ index = index+1; return `item( `id(index), descr["commentout"]:false ? _("Disabled"): _("Enabled") , name, descr["path"]:"", descr["comment"]:"" ); }  );
}

/**
 * Test, if the share is enabled = available and not turned off by YaST.
 *
 * @param options	description of the share
 * @return boolean	true if the share is enabled
 */
boolean shareEnabled( map options ) ``{
    boolean result = !( options["commentout"]:false );
    
    if( result ) result = normalize_boolean(options["available"]:"yes", true);
    
    return result;
}

/**
 * Convert printer description to items for a multiselectionbox (index, printer name, status).
 *
 * @param printers	map of available printers
 * @return list 	list of box items
 */
list printers2items( map<string,boolean> printers ) ``{
    return maplist( string name, boolean value, printers, ``{
	return `item( `id( name ), name , value );
    });
}

/**
 * Check map for synonym keys. If only synonym key is used, then it is
 * replaced by preferred key. If both preferred and synonym are used then warning
 * is displayed.
 *
 * @param config	key:value configuration map
 * @param key1		prefereed key
 * @param key2		synonym key for preferref key
 * @param share		name of share or nil (for warning message)
 * @return list 	list of box items
 */
map <string, any> check_one_synonym(map <string, any> config, string key1, string key2, string share)
{
    if (config[key1]:nil == nil) {
	if (config[key2]:nil != nil) {
	    config[key1] = config[key2]:nil;
	    config = remove(config, key2);
	}
	return config;
    }
    
    if (config[key2]:nil == nil) {
        return config;
    }
    
    // both master and synonym key are specified
    if (config[key1]:nil != config[key2]:nil) {
	string val1 = is(config[key1]:nil, boolean) ? (config[key1]:false?"tRue":"faLse") : config[key1]:"";
        string val2 = is(config[key2]:nil, boolean) ? (config[key2]:false?"tRue":"faLse") : config[key2]:"";
	
	if (share != nil) {
	    // translators: error popup on conflicting options, %1 is the name of the
	    // option which will be used, %2 is its value, %3 is the name of the
	    // other option, %4 is the %3's value. %5 is the name of a share
	    Report::Warning( sformat( _("The configuration file contains conflicting
options for share '%5':


%1: %2
%3: %4

YaST2 will use the value of '%1' for now.

Remove one of the options to resolve this conflict.
"), key1, val1 , key2, val2, share));
	} else {
	    // translators: error popup on conflicting options, %1 is the name of the
	    // option which will be used, %2 is its value, %3 is the name of the
	    // other option, %4 is the %3's value
	    Report::Warning( sformat( _("The configuration file contains conflicting
options:


%1: %2
%3: %4

YaST2 will use the value of '%1' for now.

Remove one of the options to resolve this conflict.
"), key1, val1, key2, val2));
	}
    } else {
	config[key2] = nil;
    }
    
    return config;
}

/**
 * Check map for synonym keys. If only synonym key is used, then it is
 * replaced by preferred key. If both preferred and synonym are used then warning
 * is displayed.
 *
 * @param config	key:value configuration map
 * @param synonyms	synonyms map
 * @param share		name of share or nil (for warning message)
 * @return list 	list of box items
 */
map <string, any> check_synonym(map <string, any> config, map <string, list <string> > synonyms_map, string share)
{
    foreach(string preferred, list < string > synonyms, synonyms_map, ``{
	foreach(string synonym, synonyms, ``{
	    config = check_one_synonym(config, preferred, synonym, share);
	});
    });
    
    return config;
}

/* EOF */
}
