/**
 * File:	modules/SambaServerWidgets.ycp
 * Package:	Configuration of samba-server
 * Summary:	Widgets used by SAMBA server configuration
 * Authors:	Jiri Srain <jsrain@suse.cz>
 *		Stanislav Visnovsky <visnov@suse.cz>
 *
 * $Id$
 */

{
    module "SambaServerWidgets";

    textdomain "samba-server";

    import "Label";
    import "Popup";
    import "LogView";
    import "TablePopup";
    import "SambaServer";
    import "SambaServerPassdb";
    
    include "samba-server/routines.ycp";
    include "samba-server/helps.ycp";

    global define list ShareEditContents (map descr);
    global define void ShareEditPopupInit (any opt_id, string opt_key);
    global define void ShareEditPopupStore (any opt_id, string opt_key, map event);
    global define string ShareEditSummary (any opt_id, string opt_key);
    global define boolean ShareEditEntryDelete (any opt_id, string opt_key);

    global define list PassdbEditContents (map descr);
    global define string PassdbEditOptionSummary (any opt_id, any opt_key);
    global define boolean PassdbOptionMove (any opt_id, string opt_key, symbol direction);
    global define string PassdbId2Key (map desc, any id);
    global define boolean PassdbEntryDelete (any opt_id, any opt_key);
    global define void PassdbEditOptionInit (any opt_id, any opt_key);
    global define void PassdbEditOptionStore (any opt_id, any opt_key, map event);

/**
 * A share name do be editted in the Edit share dialog
 */
global string shareToEdit = nil;

/**
 * Map of popups for CWM
 */
global map<string,map> smbconf_popups = $[
   "comment": $[
   ],
   "path": $[
      "table" :$[
	"optional": false,
      ],
   ],
   "printable": $[
	"popup" : $[
	    "widget" : `checkbox,
	]
   ],
   "create mask": $[
   ],
   "browseable": $[
	"popup" : $[
	    "widget" : `checkbox,
	]
   ],
   "available": $[
	"popup" : $[
	    "widget" : `checkbox,
	]
   ],
   "guest ok": $[
	"popup" : $[
	    "widget" : `checkbox,
	]
   ],
   "read only": $[
	"popup" : $[
	    "widget" : `checkbox,
	]
   ]
];

global define boolean initFun(any key);
global define symbol handleFun(any key, map event_descr);
global define boolean initPassdb(any key);
global define symbol handlePassdb(any key, map event_descr);
global define void storePassdb(any key, map event);
global define void AddPassdbBackend ();

global map shareswidget =  TablePopup::CreateTableDescr (
	    $["add_delete" : true, 
	      "up_down" : false, 
	      "unique_keys" : true]
	  , $[
	    "init" : initFun,
	    "handle" : handleFun,
	    "options" : smbconf_popups,
	    "ids" : SambaServerWidgets::ShareEditContents,
	    "fallback" : $[
		"init" : SambaServerWidgets::ShareEditPopupInit,
		"store" : SambaServerWidgets::ShareEditPopupStore,
		"summary" : SambaServerWidgets::ShareEditSummary,
	    ],
	    "option_delete" : SambaServerWidgets::ShareEditEntryDelete,
	    "add_items" : maplist( string key, map values, SambaServerWidgets::smbconf_popups, 
		``( key ) ),
	    "help" : HELPS["share_edit"]:"",
	]);

global map passdboptions = $[
    "smbpasswd" : $[
        "table" : $[
	    // table entry description for smbpasswd-based SAM
           "label" : _("smbpasswd file"),
        ],
        "popup" : $[
         "widget" : `textentry,
        ],
    ],
    "ldapsam" : $[
        "table" : $[
	    // table entry description for LDAP-based SAM
           "label" : _("LDAP"),
        ],
        "popup" : $[
         "widget" : `textentry,
        ],
    ],
    "tdbsam" : $[
        "table" : $[
	    // table entry description for TDB-based SAM
           "label" : _("TDB database"),
        ],
        "popup" : $[
         "widget" : `textentry,
        ],
    ],
    "mysql" : $[
        "table" : $[
	    // table entry description for MySQL-based SAM
           "label" : _("MySQL database"),
        ],
        "popup" : $[
         "widget" : `textentry,
        ],
    ],
];

global map passdbwidget =  TablePopup::CreateTableDescr (
	    $["add_delete" : true, 
	      "up_down_buttons" : true, 
	      "unique_keys" : false]
	  , $[
	    "init" : initPassdb,
	    "handle" : handlePassdb,
	    "store" : storePassdb,
	    "ids" : PassdbEditContents,
	    "help" : HELPS["passdb_edit"]:"",
	    "options": passdboptions,
	    "add_items" : [ "smbpasswd", "ldapsam", "tdbsam", "mysql" ],
	    "add_unlisted" : false,
	    "id2key": SambaServerWidgets::PassdbId2Key,
	    "option_delete" : SambaServerWidgets::PassdbEntryDelete,
	    "option_move" : SambaServerWidgets::PassdbOptionMove,
	    "fallback" : $[
		"init"	  : PassdbEditOptionInit,
		"store"	  : PassdbEditOptionStore,
		"summary" : PassdbEditOptionSummary,
	    ],
	]);


/**
 * Map of widgets for CWM
 */
global map widgets = $[
	"share_edit" : shareswidget,
	"passdb_edit" : passdbwidget
];

global define boolean initFun(any key) ``{
    return TablePopup::TableInit(SambaServerWidgets::widgets["share_edit"]:$[], key);
}

global define symbol handleFun(any key, map event_descr) ``{
    return TablePopup::TableHandle(SambaServerWidgets::widgets["share_edit"]:$[], key, event_descr);
}

// ************************************ default host table ********************

    /**
      * Function for getting contents of the default host table
      * @param descr map description map of the table
      * @return list of items for the table
      */
    global define list ShareEditContents (map descr) ``{
	return filter( string key, maplist ( string k, any v, SambaServer::shares[shareToEdit]:$[], 
	    ``((v == nil ||  k == "commentout" || k == "yast2") ? nil : k )),   ``( key != nil ) );
    }
    
    /**
      * Delete function of the global table
      * @param opt_id any option id of selected option
      * @param opt_key any option key of selected option
      * @return boolean true if was really deleted
      */
    global define boolean ShareEditEntryDelete (any opt_id, string opt_key) ``{
	// message popup
	if (! Popup::YesNo (_("Delete the selected entry?")))
	    return false;
	SambaServer::shares[shareToEdit]
	    = filter (string k, any v, SambaServer::shares[shareToEdit]:$[], ``(k != opt_id));
	return true;
    }

    /**
      * Fallback initialization function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
    global define void ShareEditPopupInit (any opt_id, string opt_key) ``{
	if( opt_id != nil ) {
	    any value = SambaServer::shares[shareToEdit, opt_key]:nil;
	    
	    // not adding a new option
	    UI::ChangeWidget (`id (opt_key), `Value,
		value);
	}
	UI::SetFocus (`id (opt_key));
    }

    /**
      * Fallback store function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      */
    global define void ShareEditPopupStore (any opt_id, string opt_key, map event) ``{
	SambaServer::shares[shareToEdit, opt_key] = UI::QueryWidget (`id (opt_key), `Value);
	SambaServer::modified = true;
    }

    /**
      * Fallback summary function of a table entry / popup
      * @param opt_id any option id
      * @param opt_key any option key
      * @return	value of the option
      */
    global define string ShareEditSummary (any opt_id, string opt_key) ``{
	return sformat ("%1", SambaServer::shares[shareToEdit, opt_key]:(any)"");
    }


/************************************* passdb list table ************************************/

    integer max_id = 0;
    map<string, string> passdb_backends = nil;
    list<string> passdb_order = [];

    global define list PassdbEditContents (map descr) ``{
	if (passdb_backends != nil)
	{
	    // we are already initialized
	    return passdb_order;
	}
	else 
	{
	    list<string> l = SambaServerPassdb::GetBackends ();
	    list<string> ids = [];
	    max_id = -1;
	    passdb_backends = (map<string, string>)listmap ( string backend, l, ``{ 
		max_id = max_id + 1;
		string s = sformat( "%1", max_id );
		ids = add( ids, s );
		return $[ s: backend ];
	    });
	    max_id = max_id + 1;
	    passdb_order = ids;
	    return ids;
	}
    }
    
    global define void PassdbEditOptionInit (any opt_id, any opt_key) ``{
	if( opt_id != nil ) {
	    // not adding a new option
	    UI::ChangeWidget (`id (opt_key), `Value,
		SambaServerPassdb::BackendDetails(passdb_backends [(string)opt_id]:""));
	}
	UI::SetFocus (`id (opt_key));
    }

    global define void PassdbEditOptionStore (any opt_id, any opt_key, map event) ``{
	string details = (string) UI::QueryWidget (`id (opt_key), `Value);
	// TODO: handle empty details
	
	if (size(details) != 0 )
	{
	    details = ":"+details;
	}
	
	if ( opt_id != nil )
	{
	    // update
	    // take the SAM type from the old data and append the new details
	    passdb_backends[ (string)opt_id ] = SambaServerPassdb::BackendSAM(passdb_backends[ (string)opt_id ]:nil)
		+ details;
	}
	else
	{
	    // insert new
	    string id = sformat ("%1", max_id);
	    max_id = max_id+1;
	    passdb_backends = (map<string, string>)add ( passdb_backends, id, (string)opt_key+details );
	    passdb_order = (list<string>) add (passdb_order, id);
	}
	
	SambaServer::modified = true;
    }

    global define string PassdbEditOptionSummary (any opt_id, any opt_key) ``{
	string option = passdb_backends [(string)opt_id]:"";
	return SambaServerPassdb::BackendDetails (option);
    }
    
    global define string PassdbId2Key (map desc, any id)
    {
	string s_id = passdb_backends [(string)id]:"";
	return SambaServerPassdb::BackendSAM (s_id);
    }

    global define boolean PassdbEntryDelete (any opt_id, any opt_key) ``{
    
	// don't delete the last one
	if (size (passdb_backends) == 1)
	{
	    import "Report";
	    
	    // error message if user tries to delete the last passdb backend
	    Report::Error (_("At least one back-end must be specified.

The back-end will not be deleted.
"));
	    return false;
	}
	
	// message popup
	if (! Popup::YesNo (_("Delete the selected back-end?")))
	    return false;
	    
	string id = (string) opt_id;
	passdb_backends = (map<string, string>)filter (string k, string v, passdb_backends, ``(k != id));
	passdb_order = (list<string>)filter (string k, passdb_order, ``(k != id));
	SambaServer::modified = true;
	return true;
    }
    
    global define void AddPassdbBackend () {
	UI::OpenDialog (
	    `VBox (
		// translators: frame text when adding a passdb backend
		`Frame (_("Back-end Type"),
		`RadioButtonGroup ( `id (`types),
		`VBox(
		    // translators: passdb backend radio button
		    `Left (`RadioButton ( `id("smbpasswd"), _("smbpasswd file") ) ),
		    // translators: passdb backend radio button
		    `Left (`RadioButton ( `id("ldapsam"), _("LDAP") ) ),
		    // translators: passdb backend radio button
		    `Left (`RadioButton ( `id("tdbsam"), _("TDB database") ) ),
		    // translators: passdb backend radio button
		    `Left (`RadioButton ( `id("mysql"), _("MySQL database") ) )
		))),
		// translators: textentry label to enter details for the selected passdb backend
		`TextEntry ( `id(`details), _("&Details:") ),
		`HBox (
		    `PushButton (`id (`add), `opt(`default), Label::AddButton ()),
		    `PushButton (`id (`cancel), Label::CancelButton ())
		)
	    )
	);
	
	do {
	    any ret = UI::UserInput ();
	
	    if ( ret == `add )
	    {
		// check: all types except smbpasswd must get detailed info
		string type = (string) UI::QueryWidget ( `types, `CurrentButton );
		string details = (string) UI::QueryWidget ( `details, `Value );
		if (size(details) != 0 )
		{
		    details = ":"+details;
		}
	
		if (type == "mysql" && size (details) == 0)
		{
		    // translators: error message, if the MySQL backend 
		    // is selected, but no details are entered
		    Popup::Error ( _("An identifier must be provided
in details 
for the MySQL passdb back-end.

Consult the Samba HOWTO Collection for
further information.
") );
		    continue;
		}
		
		// add the value		
		string id = sformat ("%1", max_id);
		max_id = max_id+1;
		passdb_backends = (map<string, string>)add ( passdb_backends, id, type+details );
		passdb_order = (list<string>) add (passdb_order, id);
		SambaServer::modified = true;
	    }
	    break;
	} while (true);
	
	UI::CloseDialog ();
    }
    
    global define boolean PassdbOptionMove (any opt_id, string opt_key, symbol direction) {
	string id = (string)opt_id;
	passdb_order = sort (string left, string right, passdb_order, ``{ boolean res = 
	    direction == `down ?
	    (left == id ? false : true)
	    :
	    (right == id ? false : true);
	    return res;
	});
	initPassdb (opt_key);
	SambaServer::modified = true;
	return true;
    }

    // test the LDAP over SSL connection
    define void testLDAPServer (string server, string suffix) {
        // translators: progress dialog text
        UI::OpenDialog(`Label( _("Testing LDAP connection...") ) );
        if( SambaServer::testLDAPS( server, suffix ) )
        {
            // translators: test result popup message
            Popup::Message( _("LDAP connection is OK.") );
        }
        UI::CloseDialog();
    }


    global define boolean initPassdb(any key) ``{
	return TablePopup::TableInit(SambaServerWidgets::widgets["passdb_edit"]:$[], key);
    }

    global define symbol handlePassdb(any key, map event_descr) ``{
	if ( event_descr["ID"]:nil == `_tp_add )
	{
	    AddPassdbBackend ();
	    TablePopup::TableInit(SambaServerWidgets::widgets["passdb_edit"]:$[], key);
	    // continue
	    return nil;
	}

	// LDAP settings menu item selected, move to a different dialog	
	if ( event_descr["ID"]:nil == `ldap )
	{
	    return `ldap;
	}
	
	// test LDAP menu item selected, try the item
	if ( event_descr["ID"]:nil == `ldap_test )
	{
	    string backend = passdb_backends[(string)UI::QueryWidget (`_tp_table, `CurrentItem)]: nil;
	    
	    if (SambaServerPassdb::BackendSAM(backend) != "ldapsam")
	    {
		// translators: the current item is not LDAP, LDAP connection cannot be tested.
		Popup::Error (_("Select an LDAP back-end to test."));
		return nil;
	    }
	    testLDAPServer( SambaServerPassdb::BackendDetails(backend), SambaServer::LDAP_suffix);
	    return nil;	    
	}
	
	if ( event_descr["ID"]:nil == `back )
	{
	    passdb_backends = nil;
	    return nil;
	}
    
	return TablePopup::TableHandle(SambaServerWidgets::widgets["passdb_edit"]:$[], key, event_descr);
    }

    global define void storePassdb(any key, map event) ``{
	list<string> res = maplist (string id, passdb_order, ``{
	    return passdb_backends[id]:"";
	});
	SambaServerPassdb::SetBackends (res);
	passdb_backends = nil; // require a new initialization
    }


/* EOF */
}

